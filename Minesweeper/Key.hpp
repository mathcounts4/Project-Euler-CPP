#pragma once

#ifdef __APPLE__
#include <Carbon/Carbon.h>
#else
#error "Unsupported platform"
#endif

// For keyboard codes, see
// /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/Headers/Events.h
using KeyInt = CGKeyCode;
enum class Key : KeyInt {
    /* Virtual keycodes */
    A = kVK_ANSI_A,
    S = kVK_ANSI_S,
    D = kVK_ANSI_D,
    F = kVK_ANSI_F,
    H = kVK_ANSI_H,
    G = kVK_ANSI_G,
    Z = kVK_ANSI_Z,
    X = kVK_ANSI_X,
    C = kVK_ANSI_C,
    V = kVK_ANSI_V,
    B = kVK_ANSI_B,
    Q = kVK_ANSI_Q,
    W = kVK_ANSI_W,
    E = kVK_ANSI_E,
    R = kVK_ANSI_R,
    Y = kVK_ANSI_Y,
    T = kVK_ANSI_T,
    ONE = kVK_ANSI_1,
    TWO = kVK_ANSI_2,
    THREE = kVK_ANSI_3,
    FOUR = kVK_ANSI_4,
    SIX = kVK_ANSI_6,
    FIVE = kVK_ANSI_5,
    EQUAL = kVK_ANSI_Equal,
    NINE = kVK_ANSI_9,
    SEVEN = kVK_ANSI_7,
    MINUS = kVK_ANSI_Minus,
    EIGHT = kVK_ANSI_8,
    ZERO = kVK_ANSI_0,
    RIGHT_BRACKET = kVK_ANSI_RightBracket,
    O = kVK_ANSI_O,
    U = kVK_ANSI_U,
    LEFT_BRACKET = kVK_ANSI_LeftBracket,
    I = kVK_ANSI_I,
    P = kVK_ANSI_P,
    L = kVK_ANSI_L,
    J = kVK_ANSI_J,
    QUOTE = kVK_ANSI_Quote,
    K = kVK_ANSI_K,
    SEMICOLON = kVK_ANSI_Semicolon,
    BACKSLASH = kVK_ANSI_Backslash,
    COMMA = kVK_ANSI_Comma,
    SLASH = kVK_ANSI_Slash,
    N = kVK_ANSI_N,
    M = kVK_ANSI_M,
    PERIOD = kVK_ANSI_Period,
    GRAVE = kVK_ANSI_Grave,
    KEYPAD_DECIMAL = kVK_ANSI_KeypadDecimal,
    KEYPAD_MULTIPLY = kVK_ANSI_KeypadMultiply,
    KEYPAD_PLUS = kVK_ANSI_KeypadPlus,
    KEYPAD_CLEAR = kVK_ANSI_KeypadClear,
    KEYPAD_DIVIDE = kVK_ANSI_KeypadDivide,
    KEYPAD_ENTER = kVK_ANSI_KeypadEnter,
    KEYPAD_MINUS = kVK_ANSI_KeypadMinus,
    KEYPAD_EQUALS = kVK_ANSI_KeypadEquals,
    KEYPAD_0 = kVK_ANSI_Keypad0,
    KEYPAD_1 = kVK_ANSI_Keypad1,
    KEYPAD_2 = kVK_ANSI_Keypad2,
    KEYPAD_3 = kVK_ANSI_Keypad3,
    KEYPAD_4 = kVK_ANSI_Keypad4,
    KEYPAD_5 = kVK_ANSI_Keypad5,
    KEYPAD_6 = kVK_ANSI_Keypad6,
    KEYPAD_7 = kVK_ANSI_Keypad7,
    KEYPAD_8 = kVK_ANSI_Keypad8,
    KEYPAD_9 = kVK_ANSI_Keypad9,
    /* keycodes for keys that are independent of keyboard layout*/
    RETURN = kVK_Return,
    TAB = kVK_Tab,
    SPACE = kVK_Space,
    DELETE = kVK_Delete,
    ESCAPE = kVK_Escape,
    COMMAND = kVK_Command,
    LEFT_COMMAND = kVK_Command,
    APPLE = kVK_Command,
    LEFT_APPLE = kVK_Command,
    SHIFT = kVK_Shift,
    LEFT_SHIFT = kVK_Shift,
    CAPS_LOCK = kVK_CapsLock,
    OPTION = kVK_Option,
    LEFT_OPTION = kVK_Option,
    ALT = kVK_Option,
    LEFT_ALT = kVK_Option,
    CONTROL = kVK_Control,
    LEFT_CONTROL = kVK_Control,
    RIGHT_COMMAND = kVK_RightCommand,
    RIGHT_APPLE = kVK_RightCommand,
    RIGHT_SHIFT = kVK_RightShift,
    RIGHT_OPTION = kVK_RightOption,
    RIGHT_ALT = kVK_RightOption,
    RIGHT_CONTROL = kVK_RightControl,
    FUNCTION = kVK_Function,
    F17 = kVK_F17,
    VOLUME_UP = kVK_VolumeUp,
    VOLUME_DOWN = kVK_VolumeDown,
    MUTE = kVK_Mute,
    F18 = kVK_F18,
    F19 = kVK_F19,
    F20 = kVK_F20,
    F5 = kVK_F5,
    F6 = kVK_F6,
    F7 = kVK_F7,
    F3 = kVK_F3,
    F8 = kVK_F8,
    F9 = kVK_F9,
    F11 = kVK_F11,
    F13 = kVK_F13,
    F16 = kVK_F16,
    F14 = kVK_F14,
    F10 = kVK_F10,
    F12 = kVK_F12,
    F15 = kVK_F15,
    HELP = kVK_Help,
    HOME = kVK_Home,
    PAGE_UP = kVK_PageUp,
    FORWARD_DELETE = kVK_ForwardDelete,
    F4 = kVK_F4,
    END = kVK_End,
    F2 = kVK_F2,
    PAGE_DOWN = kVK_PageDown,
    F1 = kVK_F1,
    LEFT_ARROW = kVK_LeftArrow,
    RIGHT_ARROW = kVK_RightArrow,
    DOWN_ARROW = kVK_DownArrow,
    UP_ARROW = kVK_UpArrow
};
